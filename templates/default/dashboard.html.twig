{% extends 'base.html.twig' %}

{% block title %}4TheCubers{% endblock %}

{% block body %}
    </head>
    <body>
    <div class="sidenav">
                <div class="d-flex justify-content-center">
                    <img src="{{ asset(user.profilePicture )}}" alt="" class="profile-picture">
                </div>

                <div class="d-flex justify-content-center">
                    <div class="profile-name">{{ user.username }}</div>
                </div>

        <div class="d-flex">
            <div class="nav-highlight"></div>
            <a class="d-flex active" href="#dashboard"><img class="nav-icon home-icon"
                                                            src="{{ asset('build/images/home.png') }}" alt="">Dashboard</a>
        </div>
        <div class="d-flex">
            <div class="nav-not-highlight"></div>
            <a href="{{ path('stats') }}"><img class="nav-icon" src="{{ asset('build/images/stats.png') }}"
                                       alt="">Statistics</a>
        </div>
        <div class="d-flex">
            <div class="nav-not-highlight"></div>
            <a href="{{ path('friends') }}" class="notification-container"><img class="nav-icon" src="{{ asset('build/images/friends.png') }}" alt="">Friends {% if amountOfRequest > 0 %}<div class="notification-counter">{{ amountOfRequest }}</div> {% endif %}</a>
        </div>
        <div class="d-flex">
            <!-- Button trigger modal -->
            <button type="button" class="btn settings-button" data-toggle="modal" data-target="#myProfileModal">
            <div class="nav-not-highlight"></div>
                <img class="nav-icon" src="{{ asset('build/images/settings.png') }}" alt="">Profile</button>
        </div>

        <div>
            <a class='btn logout-button' href="/logout">Logout</a>
        </div>
    </div>
    <div class="d-flex justify-content-between top">
        <h2>Dashboard</h2>
        <h1 class="title">4TheCuber.<span class="title-span">net</span></h1>
    </div>
    <div class="main">
        <div class="messages"></div>
        <div class="main-container">
            <div class="d-flex main-top">
                <div>

                    <select id="select-scramble" class="selectpicker select-cube-type" data-style="custom-button">
                        <optgroup label="regular">
                            <option value="222">2x2x2</option>
                            <option selected="selected" value="333">3x3x3</option>
                            <option value="444">4x4x4</option>
                            <option value="555">5x5x5</option>
                            <option value="666">6x6x6</option>
                            <option value="777">7x7x7</option>
                        </optgroup>
                        <optgroup label="blindfolded">
                            <option value="333bf">3x3x3</option>
                            <option value="444bf">4x4x4</option>
                            <option value="555bf">5x5x5</option>
                        </optgroup>
                        <optgroup label="other">
                            <option value="minx">Megaminx</option>
                            <option value="pyram">Pyraminx</option>
                        </optgroup>
                    </select>
                </div>
                <div class="divider mt-2"></div>

                <div>
                    <h1 class="scramble"></h1>
                </div>
            </div>
            <div class="d-flex">
                <div class="main-left">
                    <div class="d-flex justify-content-between">
                        <div class="top-left">
                            <div class="general-title">
                                <img class="world-icon" src="{{ asset('build/images/world.png') }}" alt="">
                                <h1 class="ml-4 mt-4">General stats</h1>
                            </div>
                            <div class="general-stats d-flex">
                                <div class="d-flex">
                                    <h2 class="total-solves">0</h2>
                                    <h3>total solves</h3>
                                </div>
                                <div class="d-flex">
                                    <h2 class="total-plus2">0</h2>
                                    <h3>+2sec</h3>
                                </div>
                                <div class="d-flex">
                                    <h2 class="total-DNF">0</h2>
                                    <h3 class="dnf">DNF</h3>
                                </div>
                            </div>
                        </div>
                        <div class="top-right">
                            <div class="friends-title">
                                <img class="friends-icon" src="{{ asset('build/images/friends-blue.png') }}" alt="">
                                <h1 class="ml-4 mt-4">Online friends</h1>
                            </div>
                            <div class="dashboard-friends d-flex">
                                {% for friend in allOnlineFriends %}
                                <div class="dashboard-friend">
                                    <img src="{{ asset(friend.profilePicture) }}" alt="" class="friend-avatar">
                                    <div class="dot"></div>
                                    <div class="friend-name">{{ friend.username }}</div>
                                </div>
                                {% endfor %}
                                {% if allOnlineFriends is empty %}
                                    <div class="online-friends-div d-flex justify-content-center">
                                        <p>None of your friends are online</p>
                                        <button type="button" class="btn btn-primary add-friends-modal-button" data-toggle="modal" data-target="#exampleModalCenter">
                                            Add friends
                                        </button>
                                    </div>
                                {% elseif friends is empty %}
                                    <div class="online-friends-div d-flex justify-content-center">
                                        <p>You don't have any friends yet.</p>
                                        <button type="button" class="btn btn-primary add-friends-modal-button" data-toggle="modal" data-target="#exampleModalCenter">
                                            Add more friends
                                        </button>
                                    </div>
                                {% endif %}

                            </div>
                        </div>
                    </div>
                    <div class="left-bottom">
                        <div class="timer">
                            <div class="timer-title d-flex justify-content-between">
                                <h2>minutes</h2>
                                <h2 style="padding-left:1%;">seconds</h2>
                                <h2>milliseconds</h2>
                            </div>
                            <h1 id="timerLabel">00<span class="">:</span>00<span class="">:</span>00</h1>
                            <div class="d-flex">
                                <button class="first-button timer-buttons add2seconds">+2</button>
                                <button class="timer-buttons did-not-finish">DNF</button>
                                <button class="timer-buttons delete-time">Delete</button>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="aside-right">
                    <div class="right-top">
                        <div class="cube-title">
                            <img class="cube-icon" src="{{ asset('build/images/cube.png') }}" alt="">
                            <h1 class="ml-4 mt-4">Latest solves</h1>
                        </div>
                        <div class="my-table">
                            <div class="column column1">
                                <div class="table-row d-flex">
                                    <div class="table-head table-item">time</div>
                                    <div class="table-head table-item">type</div>
                                </div>
                                <div class="table-row d-flex">
                                    <div class="table-item solve1"></div>
                                    <div class="table-item time1"></div>
                                </div>
                                <div class="table-row d-flex">
                                    <div class="table-item solve2"></div>
                                    <div class="table-item time2"></div>
                                </div>
                                <div class="table-row d-flex">
                                    <div class="table-item solve3"></div>
                                    <div class="table-item time3"></div>
                                </div>
                            </div>
                            <div class="column column2">
                                <div class="table-row d-flex">
                                    <div class="table-item solve4"></div>
                                    <div class="table-item time4"></div>
                                </div>
                                <div class="table-row d-flex">
                                    <div class="table-item solve5"></div>
                                    <div class="table-item time5"></div>
                                </div>
                                <div class="table-row d-flex">
                                    <div class="table-item solve6"></div>
                                    <div class="table-item time6"></div>
                                </div>
                                <div class="table-row d-flex">
                                    <div class="table-item solve7"></div>
                                    <div class="table-item time7"></div>
                                </div>

                            </div>

                        </div>
                    </div>
                    <div class="right-bottom">
                        <div class="personal-stats-title">
                            <img class="personal-icon" src="{{ asset('build/images/personal-stats.png') }}" alt="">
                            <h1 class="ml-4 mt-4">Personal stats</h1>
                        </div>
                        <div class="personal-chart" >
                            <canvas id="myChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal -->
    <div class="my-modal modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content add-friend-content">
                <button type="button" class="close add-friend-x-button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <div class="modal-header d-flex justify-content-center">
                    <h3>Add friends</h3>
                </div>
                <div class="modal-body ">
                    <h3 class="error-user"></h3>
                    <input class="add-friend-input"type="text">
                    <button type="button" class="btn btn-primary add-friend-button">Add friend</button>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button type="button" class="btn btn-secondary add-friend-close-button" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- add friend Modal -->
    <div class="my-modal modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content add-friend-content">
                <button type="button" class="close add-friend-x-button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <div class="modal-header d-flex justify-content-center">
                    <h3>Add friends</h3>
                </div>
                <div class="modal-body ">
                    <h3 class="error-user"></h3>
                    <input class="add-friend-input"type="text">
                    <button type="button" class="btn btn-primary add-friend-button">Add friend</button>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button type="button" class="btn btn-secondary add-friend-close-button" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!--Profile Modal -->
    <div class="modal fade" id="myProfileModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            {{ form_start(profileForm, { attr: {novalidate: 'novalidate'} }) }}
            <div class="modal-content profile-modal-content">
                <div class="text-center modal-header profile-modal-header d-flex justify-content-center">
                    <h3 class="edit-profile-title">Edit your profile</h3>
                </div>

                <div class="modal-body profile-modal-body">
                    <div class="edit-profile-header">
                        <div class="profile-pic-div">
                            <img src="{{ asset(user.profilePicture )}}" alt="" class="profile-pic-settings">
                        </div>

                        <label class="btn input-file-button">
                            <i class="fa fa-image"></i> Upload new image{{ form_row(profileForm.profilePicture) }}
                        </label>
                    </div>

                    <div class="edit-profile-inputs">
                        <p class="label first-edit-label">Username</p>
                        {{ form_row(profileForm.username) }}
                        <p class="label">Email</p>
                        {{ form_row(profileForm.email) }}
                        {{ form_row(profileForm.submit) }}
                    </div>

                </div>
                <div class="modal-footer profile-modal-footer">

                </div>
            </div>
            {{ form_end(profileForm) }}
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>

        $(document).ready(function () {
            function testAnim(x) {
                $('.modal .modal-dialog').attr('class', 'modal-dialog  ' + x + '  animated');
            };
            $('#myProfileModal').on('show.bs.modal', function (e) {
                var anim = 'fadeInLeft';
                testAnim(anim);
            })
            $('#myProfileModal').on('hide.bs.modal', function (e) {
                var anim = 'fadeOutLeft';
                testAnim(anim);
            })

            $(".add-friend-button").click(function(){
                let username = $(".add-friend-input").val();
                $.ajax({
                    type: "POST",
                    url: "/send-friendRequest",
                    dataType: 'JSON',
                    data: {
                        username: username
                    },
                    success: function (response) {
                        if(response.status === "success") {
                            $('.messages').addClass('friend-added-successfully');
                            $('.messages').html(response.message);
                            setTimeout(function () {
                                $('.messages').fadeTo(1000, 0.01, function () {
                                    $(this).slideUp(150, function () {
                                        $(this).remove();
                                    });
                                });
                            }, 3000)
                            $('.my-modal').modal('hide');
                        } else if(response.status === "error") {
                            $(".error-user").html(response.message);
                                $( ".my-modal" ).effect( "shake", {times:3, distance: 5}, 500 );

                        }
                    }
                });
            });
            $('.my-modal').on('hidden.bs.modal', function (e) {
                $(".error-user").html('');
            });

            var ctx = document.getElementById('myChart').getContext('2d');
            let chart = new Chart(ctx, {
                // The type of chart we want to create
                type: 'bar',
                // The data for our dataset
                data: {

                    labels: ['time in minutes'],
                    datasets: [{
                        data: [0],
                        label: 'Personal best',
                        backgroundColor: "#fdc823",
                    }, {
                        data: [0],
                        label: 'average of latest 5',
                        backgroundColor: "#f24826",
                    }, {
                        data: [0],
                        label: 'average of latest 12',
                        backgroundColor: "#1672a7",
                    }]
                },
                options: {
                    animation: {
                        "onComplete": function () {
                            var chartInstance = this.chart,
                                ctx = chartInstance.ctx;

                            ctx.font = Chart.helpers.fontString(20, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';

                            this.data.datasets.forEach(function (dataset, i) {

                                var meta = chartInstance.controller.getDatasetMeta(i);

                                meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    var dataInMinutes =millisToMinutesAndSeconds(parseInt(data));
                                    ctx.fillStyle ="#fff";
                                    ctx.fillText(dataInMinutes, bar._model.x, bar._model.y - 5);
                                });
                            });
                        }
                    },
                    scales: {
                        yAxes: [{
                            display: false,
                            gridLines: {
                                drawBorder: false,
                            },
                            ticks: {
                                stepSize: 100000,
                                beginAtZero: true   // minimum value will be 0.
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                fontColor: "white",
                                fontSize: 14,
                                stepSize: 1,
                                beginAtZero: true
                            }
                        }]
                    },
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            fontColor: "#fff",
                        }
                    },
                    tooltips: {
                        enabled: false
                    }
                }
            });
            function millisToMinutesAndSeconds(time) {
                var min = Math.floor(time / 100 / 60);
                var sec = Math.floor(time / 100);
                var mSec = time % 100;
                if (min < 10) min = "0" + min;
                if (sec >= 60) sec = sec % 60;
                if (sec < 10) sec = "0" + sec;
                if (mSec < 10) mSec = "0" + mSec;
                return min + ":" + sec + ":" + mSec;
            }
            function updateChart(personalBest, ao5, ao12){
                console.log('updating chart');
                chart.data.datasets[0].data[0] = personalBest;
                chart.data.datasets[1].data[0] = ao5;
                chart.data.datasets[2].data[0] = ao12;
                chart.update();
            }
            setTable();
            let cubeType = $('#select-scramble').val();
            getGeneralStats();
            getPersonalStats();
            setscramble(cubeType);
            $('#select-scramble').change(function () {
                cubeType = $(this).val();
                setscramble(cubeType);
                getPersonalStats();
                getGeneralStats();
            });
            //console.log(cubeType);

            function getPersonalStats(){
                $.ajax({
                    type: "POST",
                    url: "/get-personal-stats",
                    dataType: 'JSON',
                    data: {
                        type: cubeType
                    },
                    success: function (response) {
                        //console.log(response);
                        updateChart(response[0], response[1], response[2]);
                    }
                });
            }


            function getGeneralStats(){
                    $.ajax({
                        type: "POST",
                        url: "/get-general-stats",
                        dataType: 'JSON',
                        data: {
                            type: cubeType
                        },
                        success: function (response) {
                            $('.total-solves').html(response[0])
                            $('.total-plus2').html(response[1])
                            $('.total-DNF').html(response[2])
                        }
                    });
            }

            function sendData(time, plus2) {
                let sendScramble = $('.scramble').html();
                $.ajax({
                    type: "POST",
                    url: '/ajax-save-solve',
                    dataType: "json",
                    data: {
                        time: time,
                        cubeType: cubeType,
                        scramble: sendScramble,
                        plus2: plus2,
                    },
                    complete: function () {
                        getPersonalStats();
                        getGeneralStats();
                    },
                });
            }

            $(".timer-buttons").hide();
            let scramble;
            let counter = 0;
            var timerLabel = document.getElementById('timerLabel');
            var time = 0;
            var running = false;
            var timerIsEnabled = false;
            let clicked = false;
            var done = false
            var firstRound = true;

            function start() {
                running = true;
                timerIsEnabled = false;
                timer();
            }

            function stop() {
                running = false;
                timer();
            }

            function reset() {
                status = 0;
                time = 0;
                timerLabel.innerHTML = '00:00:00';
            }

            function timer() {
                if (running === true) {
                    setTimeout(function () {
                        time++;
                        var min = Math.floor(time / 100 / 60);
                        var sec = Math.floor(time / 100);
                        var mSec = time % 100;
                        if (min < 10) min = "0" + min;
                        if (sec >= 60) sec = sec % 60;
                        if (sec < 10) sec = "0" + sec;
                        if (mSec < 10) mSec = "0" + mSec;
                        timerLabel.innerHTML = min + ":" + sec + ":" + mSec;
                        timer();
                    }, 10);
                }
            }

            var pressedTime = 0; // pressing time
            var pressed = 0; // key is pushed or not ?

            var timer2 = setInterval(calculate, 10); // calculate time


            $(document).on('keydown', function (e) {
                if (e.keyCode === 32 && running === false) {
                    //runs when the spacebar is pressed down and the timer is not running
                    notRunningKeyDown();
                } else if (e.keyCode === 32 && running === true) {
                    //runs when the spacebar is pressed down but the timer IS running
                    isRunningKeyDown();
                }
            }).on('keyup', function (e) {
                if (e.keyCode === 32) {
                    //runs when the spacebar is lifted
                    keyUp()
                }
            });

            function calculate() { // increase pressing time if key is pressed !!
                if (pressed === 1) {
                    pressedTime += 1;
                }
            }

            function notRunningKeyDown() {
                // var threebythree = new Scrambo(); // Defaults to 3x3
                // console.log(threebythree.get(5)); // Returns 5 scrambles
                $("#timerLabel").removeClass("ready");
                $("#timerLabel").addClass("not-ready");
                pressed = 1;
                if (!done && !firstRound && !clicked) {
                    sendData(time);
                    if(counter<7 ){
                        counter++;
                    } else{
                        counter = 0;
                    }

                    setTableTime(time, cubeType, counter);
                    addRow(time, cubeType);
                    done = true;
                }
                if (pressedTime > 50) {
                    timerIsEnabled = true;
                    $("#timerLabel").removeClass("not-ready");
                    $("#timerLabel").addClass("ready");
                    reset();
                }
            }

            function isRunningKeyDown() {
                //console.log('stop');
                stop();
                firstRound = false;
                $(".timer-buttons").show();
                setscramble(cubeType);
                $(".add2seconds").one("click", function () {
                    if (clicked === false) {
                        time = time + 200;
                       // console.log(time);
                        clicked = true;
                        addRow(time, cubeType);
                        let plus2 = true;
                        sendData(time, plus2);
                        if(counter<7 ){
                            counter++;
                        } else{
                            counter = 0;
                        }

                        setTableTime(time, cubeType, counter);
                    }
                })
                $(".did-not-finish").one("click", function () {
                    if (clicked === false) {
                        time = 0;
                       // console.log(time);
                        addRow(time, cubeType);
                        sendData(time);
                        clicked = true;
                        if(counter<7 ){
                            counter++;
                        } else{
                            counter = 0;
                        }
                        setTableTime(time, cubeType, counter);
                    }
                })
                $(".delete-time").one("click", function () {
                    if (clicked === false) {
                        reset();
                        clicked = true;
                    }
                })
            }

            function keyUp() {
                $("#timerLabel").removeClass("not-ready");
                pressed = 0;
                // console.log(pressedTime);
                if (running === false && timerIsEnabled === true) {
                    //console.log('start');
                    done = false;
                    $(".timer-buttons").hide();
                    clicked = false;
                    start();
                }
                pressedTime = 0
            }

            function addRow(time, type) {
                $("#solvesTable").DataTable().row.add(
                    {
                        "time": time,
                        "type": type
                    }
                ).draw(false);
            }
            function setscramble(type){
                var scrambo = new Scrambo();
                 // scramble = scrambo.type(type).get();
                $('.scramble').html(scrambo.type(type).get());

            }

            function setTable(time, type){
                let solves = ['NaN','NaN','NaN','NaN','NaN','NaN','NaN'];
                let types = ['','','','','','',''];
                $('.solve1').html(solves[0]);
                $('.solve2').html(solves[1]);
                $('.solve3').html(solves[2]);
                $('.solve4').html(solves[3]);
                $('.solve5').html(solves[4]);
                $('.solve6').html(solves[5]);
                $('.solve7').html(solves[6]);

                $('.type1').html(types[0]);
                $('.type2').html(types[1]);
                $('.type3').html(types[2]);
                $('.type4').html(types[3]);
                $('.type5').html(types[4]);
                $('.type6').html(types[5]);
                $('.type7').html(types[6]);

            }
            function setTableTime(time, type, counter){
                let solve = '.solve'+counter;
                let tableType = '.time'+counter;
                if(0 === time){
                    $(solve).html('DNF');
                } else {
                    var min = Math.floor(time / 100 / 60);
                    var sec = Math.floor(time / 100);
                    var mSec = time % 100;
                    if (min < 10) min = "0" + min;
                    if (sec >= 60) sec = sec % 60;
                    if (sec < 10) sec = "0" + sec;
                    if (mSec < 10) mSec = "0" + mSec;
                    $(solve).html(min + ":" + sec + ":" + mSec);

                }
                $(tableType).html(type);
            }
        })



    </script>
{% endblock %}
